
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
% SU2 configuration file                                                       %
%                                                                              %
% Author: Jairo Paes Cavalcante Filho [Based on T. Economon & M. Pini work]    %
% Institution: University of SÃ£o Paulo                                         %
% Date: 8-JUL-2018                                                             %
% File Version 6.1.0 "Falcon"                                                  %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ------------- DIRECT, ADJOINT, AND LINEARIZED PROBLEM DEFINITION ------------%
%
% Physical governing equations (EULER, NAVIER_STOKES,
%                               WAVE_EQUATION, HEAT_EQUATION, FEM_ELASTICITY,
%                               POISSON_EQUATION)
SOLVER= EULER
%
% Specify turbulence model (NONE, SA, SA_NEG, SST, SA_E, SA_COMP, SA_E_COMP)
KIND_TURB_MODEL= NONE
%
% Mathematical problem (DIRECT, CONTINUOUS_ADJOINT, DISCRETE_ADJOINT)
MATH_PROBLEM= DISCRETE_ADJOINT
%
%
% Axisymmetric simulation, only compressible flows (NO, YES)
AXISYMMETRIC= NO
%
% Restart solution (NO, YES)
RESTART_SOL= NO
%
% Discard the data storaged in the solution and geometry files
% e.g. AOA, dCL/dAoA, dCD/dCL, iter, etc.
% Note that AoA in the solution and geometry files is critical
% to aero design using AoA as a variable. (NO, YES)
DISCARD_INFILES= NO
%
% System of measurements (SI, US)
% International system of units (SI): ( meters, kilograms, Kelvins,
%                                       Newtons = kg m/s^2, Pascals = N/m^2, 
%                                       Density = kg/m^3, Speed = m/s,
%                                       Equiv. Area = m^2 )
% United States customary units (US): ( inches, slug, Rankines, lbf = slug ft/s^2, 
%                                       psf = lbf/ft^2, Density = slug/ft^3, 
%                                       Speed = ft/s, Equiv. Area = ft^2 )
SYSTEM_MEASUREMENTS= SI

% -------------------- COMPRESSIBLE FREE-STREAM 
%
% Mach number (non-dimensional, based on the free-stream values)
MACH_NUMBER= 0.2395
%
% Angle of attack (degrees, only for compressible flows)
AOA= 0.0
%
% Side-slip angle (degrees, only for compressible flows)
SIDESLIP_ANGLE= 0.0
%
% Free-stream option to choose between density and temperature (default) for
% initializing the solution (TEMPERATURE_FS, DENSITY_FS)
FREESTREAM_OPTION= TEMPERATURE_FS
%
% Free-stream pressure (101325.0 N/m^2, 2116.216 psf by default)
FREESTREAM_PRESSURE= 100000.0
%
% Free-stream temperature (288.15 K, 518.67 R by default)
FREESTREAM_TEMPERATURE= 288.0
%
% Free-stream density (1.2886 Kg/m^3, 0.0025 slug/ft^3 by default)
FREESTREAM_DENSITY= 1.2092
%
% Free-stream velocity (1.0 m/s, 1.0 ft/s by default)
FREESTREAM_VELOCITY= ( 1.0, 0.00, 0.00 )
%
% Compressible flow non-dimensionalization (DIMENSIONAL, FREESTREAM_PRESS_EQ_ONE,
%                              FREESTREAM_VEL_EQ_MACH, FREESTREAM_VEL_EQ_ONE)
REF_DIMENSIONALIZATION= FREESTREAM_PRESS_EQ_ONE

% Reference origin for moment computation (m or in)
REF_ORIGIN_MOMENT_X = 0.25
REF_ORIGIN_MOMENT_Y = 0.00
REF_ORIGIN_MOMENT_Z = 0.00
%
% Reference length for moment non-dimensional coefficients (m or in)
REF_LENGTH= 1.0
%
% Reference area for non-dimensional force coefficients (0 implies automatic
% calculation) (m^2 or in^2)
REF_AREA= 1.0
%
% ---- IDEAL GAS, POLYTROPIC, VAN DER WAALS AND PENG ROBINSON CONSTANTS -------%
%
% Fluid model (STANDARD_AIR, IDEAL_GAS, VW_GAS, PR_GAS,
%              CONSTANT_DENSITY, INC_IDEAL_GAS)
FLUID_MODEL= IDEAL_GAS
%
% Ratio of specific heats (1.4 default and the value is hardcoded
%                          for the model STANDARD_AIR, compressible only)
GAMMA_VALUE= 1.338
%
% Specific gas constant (287.058 J/kg*K default and this value is hardcoded
%                        for the model STANDARD_AIR, compressible only)
GAS_CONSTANT= 518.28
%
% Critical Temperature (131.00 K by default)
CRITICAL_TEMPERATURE= 190.564
%
% Critical Pressure (3588550.0 N/m^2 by default)
CRITICAL_PRESSURE= 4599200.0
%
% Acentric factor (0.035 (air))
ACENTRIC_FACTOR= 0.01142
%
% ------------------------ SUPERSONIC SIMULATION ------------------------------%
% Evaluate equivalent area on the Near-Field (NO, YES)
EQUIV_AREA= NO

% --------------------- INVERSE DESIGN SIMULATION -----------------------------%
%
% Evaluate an inverse design problem using Cp (NO, YES)
INV_DESIGN_CP= YES
%

% -------------------- BOUNDARY CONDITION DEFINITION --------------------------%
%
% Euler wall boundary marker(s) (NONE = no marker)
MARKER_EULER= ( WALL1 )
%
% Symmetry boundary marker(s) (NONE = no marker)
MARKER_SYM= ( SYMMETRY )
%
% Internal boundary marker(s) e.g. no boundary condition (NONE = no marker)
MARKER_INTERNAL= ( NONE )
%
% Near-Field boundary marker(s) (NONE = no marker)
MARKER_NEARFIELD= ( NONE )
%
% Inlet boundary type (TOTAL_CONDITIONS, MASS_FLOW)
INLET_TYPE= TOTAL_CONDITIONS
%
% Read inlet profile from a file (YES, NO) default: NO
SPECIFIED_INLET_PROFILE= NO
%
% Inlet boundary marker(s) with the following formats (NONE = no marker)
% Total Conditions: (inlet marker, total temp, total pressure, flow_direction_x,
%           flow_direction_y, flow_direction_z, ... ) where flow_direction is
%           a unit vector.
% Mass Flow: (inlet marker, density, velocity magnitude, flow_direction_x,
%           flow_direction_y, flow_direction_z, ... ) where flow_direction is
%           a unit vector.
% Incompressible: (inlet marker, temperature, velocity magnitude, flow_direction_x,
%           flow_direction_y, flow_direction_z, ... ) where flow_direction is
%           a unit vector.
MARKER_INLET= ( INFLOW, 288.0 100000.0, 1.0, 0.0, 0.0 )
%
% Outlet boundary marker(s) (NONE = no marker)
% Format: ( outlet marker, back pressure (static), ... )
MARKER_OUTLET= ( OUTFLOW, 83049.0 )
%
MARKER_SHROUD= (NONE)
MARKER_FLUID_INTERFACE= ( NONE )
MARKER_TURBOMACHINERY= ( NONE )
MARKER_MIXINGPLANE_INTERFACE= ( NONE )
MARKER_GILES= ( NONE )

% ------------------------ SURFACES IDENTIFICATION ----------------------------%
%
% Marker(s) of the surface in the surface flow solution file
MARKER_PLOTTING = ( WALL1 )
%
% Marker(s) of the surface where the non-dimensional coefficients are evaluated.
MARKER_MONITORING = ( WALL1 )
%
% Viscous wall markers for which wall functions must be applied. (NONE = no marker)
% Format: ( marker name, wall function type, ... )
MARKER_WALL_FUNCTIONS= ( NONE )
%
% Marker(s) of the surface where custom thermal BC's are defined.
MARKER_PYTHON_CUSTOM = ( NONE )
%
% Marker(s) of the surface where obj. func. (design problem) will be evaluated
MARKER_DESIGNING = ( WALL1 )
%
% Marker(s) of the surface that is going to be analyzed in detail (massflow, average pressure, distortion, etc)
MARKER_ANALYZE = ( WALL1 )

% ------------- COMMON PARAMETERS DEFINING THE NUMERICAL METHOD ---------------%
%
% Numerical method for spatial gradients (GREEN_GAUSS, WEIGHTED_LEAST_SQUARES)
NUM_METHOD_GRAD= WEIGHTED_LEAST_SQUARES
%
% CFL number (initial value for the adaptive CFL number)
CFL_NUMBER= 0.94
%
% Adaptive CFL number (NO, YES)
CFL_ADAPT= NO
%
% Parameters of the adaptive CFL number (factor down, factor up, CFL min value,
%                                        CFL max value )
CFL_ADAPT_PARAM= ( 1.5, 0.5, 1.25, 50.0 )
%
% Maximum Delta Time in local time stepping simulations
MAX_DELTA_TIME= 1E6
%
% Runge-Kutta alpha coefficients
RK_ALPHA_COEFF= ( 0.66667, 0.66667, 1.000000 )
%
% Objective function in gradient evaluation   (DRAG, LIFT, SIDEFORCE, MOMENT_X,
%                                             MOMENT_Y, MOMENT_Z, EFFICIENCY,
%                                             EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%                                             FORCE_X, FORCE_Y, FORCE_Z, THRUST,
%                                             TORQUE, TOTAL_HEATFLUX,
%                                             MAXIMUM_HEATFLUX, INVERSE_DESIGN_PRESSURE,
%                                             INVERSE_DESIGN_HEATFLUX, SURFACE_TOTAL_PRESSURE, 
%                                             SURFACE_MASSFLOW, SURFACE_STATIC_PRESSURE, SURFACE_MACH)
% For a weighted sum of objectives: separate by commas, add OBJECTIVE_WEIGHT and MARKER_MONITORING in matching order.
OBJECTIVE_FUNCTION= INVERSE_DESIGN_PRESSURE
%
% List of weighting values when using more than one OBJECTIVE_FUNCTION. Separate by commas and match with MARKER_MONITORING.
OBJECTIVE_WEIGHT = 1.0

% ----------- SLOPE LIMITER AND DISSIPATION SENSOR DEFINITION -----------------%
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the flow equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_FLOW= YES
%
% Slope limiter (NONE, VENKATAKRISHNAN, VENKATAKRISHNAN_WANG,
%                BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_FLOW= VENKATAKRISHNAN
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the turbulence equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_TURB= NO
%
% Slope limiter (NONE, VENKATAKRISHNAN, VENKATAKRISHNAN_WANG,
%                BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_TURB= VENKATAKRISHNAN
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the adjoint flow equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_ADJFLOW= YES
%
% Slope limiter (NONE, VENKATAKRISHNAN, BARTH_JESPERSEN, VAN_ALBADA_EDGE,
%                SHARP_EDGES, WALL_DISTANCE)
SLOPE_LIMITER_ADJFLOW= VENKATAKRISHNAN
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the turbulence adjoint equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_ADJTURB= NO
%
% Slope limiter (NONE, VENKATAKRISHNAN, BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_ADJTURB= VENKATAKRISHNAN
%
% Coefficient for the Venkat's limiter (upwind scheme). A larger values decrease
%             the extent of limiting, values approaching zero cause
%             lower-order approximation to the solution (0.05 by default)
VENKAT_LIMITER_COEFF= 0.05
%
% Coefficient for the adjoint sharp edges limiter (3.0 by default).
ADJ_SHARP_LIMITER_COEFF= 3.0
%
% Freeze the value of the limiter after a number of iterations
LIMITER_ITER= 999999
%
% 1st order artificial dissipation coefficients for
%     the LaxâFriedrichs method ( 0.15 by default )
LAX_SENSOR_COEFF= 0.15
%
% 2nd and 4th order artificial dissipation coefficients for
%     the JST method ( 0.5, 0.02 by default )
JST_SENSOR_COEFF= ( 0.5, 0.02 )
%
% 1st order artificial dissipation coefficients for
%     the adjoint LaxâFriedrichs method ( 0.15 by default )
ADJ_LAX_SENSOR_COEFF= 0.15
%
% 2nd, and 4th order artificial dissipation coefficients for
%     the adjoint JST method ( 0.5, 0.02 by default )
ADJ_JST_SENSOR_COEFF= ( 0.5, 0.02 )

% ------------------------ LINEAR SOLVER DEFINITION ---------------------------%
%
% Linear solver or smoother for implicit formulations (BCGSTAB, FGMRES, SMOOTHER)
LINEAR_SOLVER= FGMRES
%
% Preconditioner of the Krylov linear solver (ILU, LU_SGS, LINELET, JACOBI)
LINEAR_SOLVER_PREC= LU_SGS
%
% Linael solver ILU preconditioner fill-in level (0 by default)
LINEAR_SOLVER_ILU_FILL_IN= 0
%
% Minimum error of the linear solver for implicit formulations
LINEAR_SOLVER_ERROR= 1E-4
%
% Max number of iterations of the linear solver for the implicit formulation
LINEAR_SOLVER_ITER= 20

% -------------------------- MULTIGRID PARAMETERS -----------------------------%
%
% Multi-grid levels (0 = no multi-grid)
MGLEVEL= 2
%
% Multi-grid cycle (V_CYCLE, W_CYCLE, FULLMG_CYCLE)
MGCYCLE= V_CYCLE
%
% Multi-grid pre-smoothing level
MG_PRE_SMOOTH= ( 1, 2, 3, 3 )
%
% Multi-grid post-smoothing level
MG_POST_SMOOTH= ( 0, 0, 0, 0 )
%
% Jacobi implicit smoothing of the correction
MG_CORRECTION_SMOOTH= ( 0, 0, 0, 0 )
%
% Damping factor for the residual restriction
MG_DAMP_RESTRICTION= 0.75
%
% Damping factor for the correction prolongation
MG_DAMP_PROLONGATION= 0.75

% -------------------- FLOW NUMERICAL METHOD DEFINITION -----------------------%
%
% Convective numerical method (JST, LAX-FRIEDRICH, CUSP, ROE, AUSM, HLLC,
%                              TURKEL_PREC, MSW, FDS)
CONV_NUM_METHOD_FLOW= JST
%
% Post-reconstruction correction for low Mach number flows (NO, YES)
LOW_MACH_CORR= NO
%
% Roe-Turkel preconditioning for low Mach number flows (NO, YES)
LOW_MACH_PREC= NO
%
% Entropy fix coefficient (0.0 implies no entropy fixing, 1.0 implies scalar
%                          artificial dissipation)
ENTROPY_FIX_COEFF= 0.0
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT, EULER_EXPLICIT)
TIME_DISCRE_FLOW= EULER_IMPLICIT
%
% Relaxation coefficient


% ---------------- ADJOINT-FLOW NUMERICAL METHOD DEFINITION -------------------%
%
% Convective numerical method (JST, LAX-FRIEDRICH, ROE)
CONV_NUM_METHOD_ADJFLOW= JST
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT)
TIME_DISCRE_ADJFLOW= EULER_IMPLICIT
%
% Relaxation coefficient
RELAXATION_FACTOR_ADJOINT= 1.0
%
% Reduction factor of the CFL coefficient in the adjoint problem
CFL_REDUCTION_ADJFLOW= 0.96
%
% Limit value for the adjoint variable
LIMIT_ADJFLOW= 1E6
%
% Use multigrid in the adjoint problem (NO, YES)
MG_ADJFLOW= YES

% ----------------------- GEOMETRY EVALUATION PARAMETERS ----------------------%
%
% Marker(s) of the surface where geometrical based function will be evaluated
GEO_MARKER= ( WALL1 )
%
% Description of the geometry to be analyzed (AIRFOIL, WING)
GEO_DESCRIPTION= AIRFOIL
%
% Plot loads and Cp distributions on each airfoil section
GEO_PLOT_STATIONS= NO
%
% Geometrical evaluation mode (FUNCTION, GRADIENT)
GEO_MODE= FUNCTION

% ------------------------- GRID ADAPTATION STRATEGY --------------------------%
%
% Kind of grid adaptation (NONE, PERIODIC, FULL, FULL_FLOW, GRAD_FLOW,
%                          FULL_ADJOINT, GRAD_ADJOINT, GRAD_FLOW_ADJ, ROBUST,
%                          FULL_LINEAR, COMPUTABLE, COMPUTABLE_ROBUST,
%                          REMAINING, WAKE, SMOOTHING, SUPERSONIC_SHOCK)
KIND_ADAPT= FULL_FLOW
%
% Percentage of new elements (% of the original number of elements)
NEW_ELEMS= 5
%
% Scale factor for the dual volume
DUALVOL_POWER= 0.5
%
% Adapt the boundary elements (NO, YES)
ADAPT_BOUNDARY= YES

% ----------------------- DESIGN VARIABLE PARAMETERS --------------------------%
%
% Kind of deformation (NO_DEFORMATION, SCALE_GRID, TRANSLATE_GRID, ROTATE_GRID,
%                      FFD_SETTING, FFD_NACELLE,
%                      FFD_CONTROL_POINT, FFD_CAMBER, FFD_THICKNESS, FFD_TWIST
%                      FFD_CONTROL_POINT_2D, FFD_CAMBER_2D, FFD_THICKNESS_2D, 
%                      FFD_TWIST_2D, HICKS_HENNE, SURFACE_BUMP, SURFACE_FILE)
DV_KIND= HICKS_HENNE
%
% Marker of the surface in which we are going apply the shape deformation
DV_MARKER= ( WALL1 )
%
% Parameters of the shape deformation
% - NO_DEFORMATION ( 1.0 )
% - TRANSLATE_GRID ( x_Disp, y_Disp, z_Disp ), as a unit vector
% - ROTATE_GRID ( x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ) axis, DV_VALUE in deg.
% - SCALE_GRID ( 1.0 )
% - ANGLE_OF_ATTACK ( 1.0 )
% - FFD_SETTING ( 1.0 )
% - FFD_CONTROL_POINT ( FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Disp, y_Disp, z_Disp )
% - FFD_NACELLE ( FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Disp, phi_Disp )
% - FFD_GULL ( FFD_BoxTag, j_Ind )
% - FFD_ANGLE_OF_ATTACK ( FFD_BoxTag, 1.0 )
% - FFD_CAMBER ( FFD_BoxTag, i_Ind, j_Ind )
% - FFD_THICKNESS ( FFD_BoxTag, i_Ind, j_Ind )
% - FFD_TWIST ( FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
% - FFD_CONTROL_POINT_2D ( FFD_BoxTag, i_Ind, j_Ind, x_Disp, y_Disp )
% - FFD_CAMBER_2D ( FFD_BoxTag, i_Ind )
% - FFD_THICKNESS_2D ( FFD_BoxTag, i_Ind )
% - FFD_TWIST_2D ( FFD_BoxTag, x_Orig, y_Orig )
% - HICKS_HENNE ( Lower Surface (0)/Upper Surface (1)/Only one Surface (2), x_Loc )
% - SURFACE_BUMP ( x_Start, x_End, x_Loc )
%
DV_PARAM= ( 0, 0.5 )
%
% Value of the shape deformation
DV_VALUE= 0.01
%

% ------------------------ GRID DEFORMATION PARAMETERS ------------------------%
%
% Linear solver or smoother for implicit formulations (FGMRES, RESTARTED_FGMRES, BCGSTAB)
DEFORM_LINEAR_SOLVER= BCGSTAB
%
% Preconditioner of the Krylov linear solver (ILU, LU_SGS, JACOBI)
DEFORM_LINEAR_SOLVER_PREC= LU_SGS
%
% Number of smoothing iterations for mesh deformation
DEFORM_LINEAR_SOLVER_ITER= 1000
%
% Number of nonlinear deformation iterations (surface deformation increments)
DEFORM_NONLINEAR_ITER= 1
%
% Print the residuals during mesh deformation to the console (YES, NO)
DEFORM_CONSOLE_OUTPUT= YES
%
% Minimum residual criteria for the linear solver convergence of grid deformation
DEFORM_LINEAR_SOLVER_ERROR= 1E-14
%
% Deformation coefficient (linear elasticity limits from -1.0 to 0.5, a larger
% value is also possible)
DEFORM_COEFF = 0.1
%
% Type of element stiffness imposed for FEA mesh deformation (INVERSE_VOLUME,
%                                           WALL_DISTANCE, CONSTANT_STIFFNESS)
DEFORM_STIFFNESS_TYPE= INVERSE_VOLUME
%
% Deform the grid only close to the surface. It is possible to specify how much
% of the volumetric grid is going to be deformed in meters or inches (1E6 by default)
DEFORM_LIMIT = 0.3

% --------------------------- CONVERGENCE PARAMETERS --------------------------%
%
% Number of total iterations
ITER= 12000
%
% Convergence criteria (CAUCHY, RESIDUAL)
%
CONV_CRITERIA= RESIDUAL
%
%
% Min value of the residual (log10 of the residual)
CONV_RESIDUAL_MINVAL= -9.00
%
% Start convergence criteria at iteration number
CONV_STARTITER= 20
%
% Number of elements to apply the criteria
CONV_CAUCHY_ELEMS= 100
%
% Epsilon to control the series convergence
CONV_CAUCHY_EPS= 1E-10
%
%

% ------------------------- INPUT/OUTPUT INFORMATION --------------------------%
%
% Mesh input file
MESH_FILENAME= Arina2Kmesh.su2
%
% Mesh input file format (SU2, CGNS)
MESH_FORMAT= SU2
%
% Mesh output file
MESH_OUT_FILENAME= MESHOUT_Arina2Kmesh.su2
%
% Restart flow input file
SOLUTION_FILENAME= solution_flow.dat
%
% Restart adjoint input file
SOLUTION_ADJ_FILENAME= solution_adj.dat
%
% Output file format (TECPLOT, TECPLOT_BINARY, PARAVIEW,
%                     FIELDVIEW, FIELDVIEW_BINARY)
TABULAR_FORMAT= CSV
%
% Output file convergence history (w/o extension)
CONV_FILENAME= history
%
% Output file with the forces breakdown
BREAKDOWN_FILENAME= forces_breakdown.dat
%
% Output file restart flow
RESTART_FILENAME= restart_flow.dat
%
% Output file restart adjoint
RESTART_ADJ_FILENAME= restart_adj.dat
%
% Output file flow (w/o extension) variables
VOLUME_FILENAME= flow
%
% Output file adjoint (w/o extension) variables
VOLUME_ADJ_FILENAME= adjoint
%
% Output Objective function
VALUE_OBJFUNC_FILENAME= of_eval.dat
%
% Output objective function gradient (using continuous adjoint)
GRAD_OBJFUNC_FILENAME= of_grad.dat
%
% Output file surface flow coefficient (w/o extension)
SURFACE_FILENAME= surface_flow
%
% Output file surface adjoint coefficient (w/o extension)
SURFACE_ADJ_FILENAME= surface_adjoint
%
% Writing solution file frequency
WRT_SOL_FREQ= 1000
%
% Writing solution file frequency for physical time steps (dual time)
WRT_SOL_FREQ_DUALTIME= 1
%
% Writing convergence history frequency
WRT_CON_FREQ= 1
%
% Writing convergence history frequency (dual time, only written to screen)
WRT_CON_FREQ_DUALTIME= 10
%
% Output residual values in the solution files
WRT_RESIDUALS= YES
%
% Output limiters values in the solution files
WRT_LIMITERS= NO
%
% Output the sharp edges detector
WRT_SHARPEDGES= NO
%
% Output the solution at each surface in the history file
WRT_SURFACE= NO
%
%
% Write binary restart files (YES, NO)
WRT_BINARY_RESTART= YES
%
% Read binary restart files (YES, NO)
READ_BINARY_RESTART= YES
%
% Reorient elements based on potential negative volumes (YES/NO)
REORIENT_ELEMENTS= YES
%
% Screen output
SCREEN_OUTPUT = (INNER_ITER, RMS_ADJ_DENSITY, RMS_ADJ_ENERGY, SENS_PRESS, SENS_AOA)

% --------------------- OPTIMAL SHAPE DESIGN DEFINITION -----------------------%
%
% Available flow based objective functions or constraint functions
%    DRAG, LIFT, SIDEFORCE, EFFICIENCY, BUFFET, 
%    FORCE_X, FORCE_Y, FORCE_Z,
%    MOMENT_X, MOMENT_Y, MOMENT_Z,
%    THRUST, TORQUE, FIGURE_OF_MERIT,
%    EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%    TOTAL_HEATFLUX, MAXIMUM_HEATFLUX,
%    INVERSE_DESIGN_PRESSURE, INVERSE_DESIGN_HEATFLUX,
%    SURFACE_TOTAL_PRESSURE, SURFACE_MASSFLOW
%    SURFACE_STATIC_PRESSURE, SURFACE_MACH
%
% Available geometrical based objective functions or constraint functions
%    AIRFOIL_AREA, AIRFOIL_THICKNESS, AIRFOIL_CHORD, AIRFOIL_TOC, AIRFOIL_AOA,
%    WING_VOLUME, WING_MIN_THICKNESS, WING_MAX_THICKNESS, WING_MAX_CHORD, WING_MIN_TOC, WING_MAX_TWIST, WING_MAX_CURVATURE, WING_MAX_DIHEDRAL
%    STATION#_WIDTH, STATION#_AREA, STATION#_THICKNESS, STATION#_CHORD, STATION#_TOC,
%    STATION#_TWIST (where # is the index of the station defined in GEO_LOCATION_STATIONS)
%
% Available design variables
% 2D Design variables
%    FFD_CONTROL_POINT_2D   (  19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov )
%    FFD_CAMBER_2D          (  20, Scale | Mark. List | FFD_BoxTag, i_Ind )
%    FFD_THICKNESS_2D       (  21, Scale | Mark. List | FFD_BoxTag, i_Ind )
%    FFD_TWIST_2D           (  22, Scale | Mark. List | FFD_BoxTag, x_Orig, y_Orig )
%    HICKS_HENNE            (  30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc )
%    ANGLE_OF_ATTACK        ( 101, Scale | Mark. List | 1.0 )
%
% 3D Design variables
%    FFD_CONTROL_POINT      (  11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov )
%    FFD_NACELLE            (  12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov )
%    FFD_GULL               (  13, Scale | Mark. List | FFD_BoxTag, j_Ind )
%    FFD_CAMBER             (  14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind )
%    FFD_TWIST              (  15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%    FFD_THICKNESS          (  16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind )
%    FFD_ROTATION           (  18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn )
%    FFD_ANGLE_OF_ATTACK    (  24, Scale | Mark. List | FFD_BoxTag, 1.0 )
%
% Global design variables
%    TRANSLATION            (   1, Scale | Mark. List | x_Disp, y_Disp, z_Disp )
%    ROTATION               (   2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn )
%
%
% Optimization objective function with scaling factor, separated by semicolons.
% To include quadratic penalty function: use OPT_CONSTRAINT option syntax within the OPT_OBJECTIVE list.
% ex= Objective * Scale
OPT_OBJECTIVE= INVERSE_DESIGN_PRESSURE * 0.9
%
% Optimization constraint functions with pushing factors (affects its value, not the gradient  in the python scripts), separated by semicolons
% ex= (Objective = Value ) * Scale, use '>','<','='
OPT_CONSTRAINT= ( AIRFOIL_THICKNESS > 0.049999999999 ) * 0.9
%OPT_CONSTRAINT= NONE 
%
% Factor to reduce the norm of the gradient (affects the objective function and gradient in the python scripts)
% In general, a norm of the gradient ~1E-6 is desired.
OPT_GRADIENT_FACTOR= 1E-6
%
% Factor to relax or accelerate the optimizer convergence (affects the line search in SU2_DEF)
% In general, surface deformations of 0.01'' or 0.0001m are desirable
OPT_RELAX_FACTOR= 1E3
%
% Maximum number of iterations
OPT_ITERATIONS= 1
%
% Requested accuracy
OPT_ACCURACY= 1E-1
%
% Optimization bound (bounds the line search in SU2_DEF)
OPT_LINE_SEARCH_BOUND= 1E6
%
% Upper bound for each design variable (bound in the python optimizer)
OPT_BOUND_UPPER= 5E-3
%
% Lower bound for each design variable (bound in the python optimizer)
OPT_BOUND_LOWER= -5E-3
%
% Finite difference step size for python scripts (0.001 default, recommended
%												  0.001 x REF_LENGTH)
FIN_DIFF_STEP = 0.001
%
% Optimization design variables, separated by semicolons
%
DEFINITION_DV= ( 30 , 1.0 | WALL1 | 0 , 0.05  ); ( 30 , 1.0 | WALL1 | 0 , 0.1  ); ( 30 , 1.0 | WALL1 | 0 , 0.15  ); ( 30 , 1.0 | WALL1 | 0 , 0.2  ); ( 30 , 1.0 | WALL1 | 0 , 0.25  ); ( 30 , 1.0 | WALL1 | 0 , 0.3  ); ( 30 , 1.0 | WALL1 | 0 , 0.35  ); ( 30 , 1.0 | WALL1 | 0 , 0.4  ); ( 30 , 1.0 | WALL1 | 0 , 0.45  ); ( 30 , 1.0 | WALL1 | 0 , 0.5  ); ( 30 , 1.0 | WALL1 | 0 , 0.505  ); ( 30 , 1.0 | WALL1 | 0 , 0.510  ); ( 30 , 1.0 | WALL1 | 0 , 0.515  ); ( 30 , 1.0 | WALL1 | 0 , 0.520  ); ( 30 , 1.0 | WALL1 | 0 , 0.525  ); ( 30 , 1.0 | WALL1 | 0 , 0.530  ); ( 30 , 1.0 | WALL1 | 0 , 0.535  ); ( 30 , 1.0 | WALL1 | 0 , 0.540  ); ( 30 , 1.0 | WALL1 | 0 , 0.545  ); ( 30 , 1.0 | WALL1 | 0 , 0.550  ); ( 30 , 1.0 | WALL1 | 0 , 0.555  ); ( 30 , 1.0 | WALL1 | 0 , 0.560  ); ( 30 , 1.0 | WALL1 | 0 , 0.565  ); ( 30 , 1.0 | WALL1 | 0 , 0.570  ); ( 30 , 1.0 | WALL1 | 0 , 0.575  ); ( 30 , 1.0 | WALL1 | 0 , 0.580  ); ( 30 , 1.0 | WALL1 | 0 , 0.585  ); ( 30 , 1.0 | WALL1 | 0 , 0.590  ); ( 30 , 1.0 | WALL1 | 0 , 0.595  ); ( 30 , 1.0 | WALL1 | 0 , 0.600  ); ( 30 , 1.0 | WALL1 | 0 , 0.605  ); ( 30 , 1.0 | WALL1 | 0 , 0.610  ); ( 30 , 1.0 | WALL1 | 0 , 0.615  ); ( 30 , 1.0 | WALL1 | 0 , 0.620  ); ( 30 , 1.0 | WALL1 | 0 , 0.625  ); ( 30 , 1.0 | WALL1 | 0 , 0.630  ); ( 30 , 1.0 | WALL1 | 0 , 0.635  ); ( 30 , 1.0 | WALL1 | 0 , 0.640  ); ( 30 , 1.0 | WALL1 | 0 , 0.645  ); ( 30 , 1.0 | WALL1 | 0 , 0.650  ); ( 30 , 1.0 | WALL1 | 0 , 0.655  ); ( 30 , 1.0 | WALL1 | 0 , 0.660  ); ( 30 , 1.0 | WALL1 | 0 , 0.665  ); ( 30 , 1.0 | WALL1 | 0 , 0.670  ); ( 30 , 1.0 | WALL1 | 0 , 0.675  ); ( 30 , 1.0 | WALL1 | 0 , 0.680  ); ( 30 , 1.0 | WALL1 | 0 , 0.685  ); ( 30 , 1.0 | WALL1 | 0 , 0.690  ); ( 30 , 1.0 | WALL1 | 0 , 0.695  ); ( 30 , 1.0 | WALL1 | 0 , 0.700  ); ( 30 , 1.0 | WALL1 | 0 , 0.705  ); ( 30 , 1.0 | WALL1 | 0 , 0.710  ); ( 30 , 1.0 | WALL1 | 0 , 0.715  ); ( 30 , 1.0 | WALL1 | 0 , 0.720  ); ( 30 , 1.0 | WALL1 | 0 , 0.725  ); ( 30 , 1.0 | WALL1 | 0 , 0.730  ); ( 30 , 1.0 | WALL1 | 0 , 0.735  ); ( 30 , 1.0 | WALL1 | 0 , 0.740  ); ( 30 , 1.0 | WALL1 | 0 , 0.745  ); ( 30 , 1.0 | WALL1 | 0 , 0.750  ); ( 30 , 1.0 | WALL1 | 0 , 0.755  ); ( 30 , 1.0 | WALL1 | 0 , 0.760  ); ( 30 , 1.0 | WALL1 | 0 , 0.765  ); ( 30 , 1.0 | WALL1 | 0 , 0.770  ); ( 30 , 1.0 | WALL1 | 0 , 0.775  ); ( 30 , 1.0 | WALL1 | 0 , 0.780  ); ( 30 , 1.0 | WALL1 | 0 , 0.785  ); ( 30 , 1.0 | WALL1 | 0 , 0.790  ); ( 30 , 1.0 | WALL1 | 0 , 0.795  ); ( 30 , 1.0 | WALL1 | 0 , 0.8  ); ( 30 , 1.0 | WALL1 | 0 , 0.85 ); ( 30 , 1.0 | WALL1 | 0 , 0.9  ); ( 30 , 1.0 | WALL1 | 0 , 0.95  )
%
% Use combined objective within gradient evaluation: may reduce cost to compute gradients when using the adjoint formulation.
OPT_COMBINE_OBJECTIVE = YES
